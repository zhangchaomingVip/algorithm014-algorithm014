给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。 找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。 
示例: 
X X X X
X O O X
X X O X
X O X X
运行你的函数后，矩阵变为： 
X X X X
X X X X
X X X X
X O X X
解释: 
被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被
填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。 

解法1：DFS 深度优先遍历
思路：
1)找到每一行每一列的第0个和最后一个 'O',把自己和相邻的以及后序相邻的标记为 '*' (dfs)
2)遍历整个矩阵，把 '*'变为'O',把 'O'变成 'X'
    

`

       public void solve(char[][] board) {
            if (board.length == 0 || board[0].length == 0) return;
            if (board.length < 3 || board[0].length < 3) return;
    
            int m = board.length;
            int n = board[0].length;
    
            //处理列
            for (int i = 0; i < m; i++) {
                //每列的第一个
                if(board[i][0] == 'O') helper(board, i, 0);
                //每列的最后一个
                if(board[i][n - 1] == 'O') helper(board, i, n - 1);
            }
            //处理行
            for (int j = 1; j < n - 1; j++) {
                if(board[0][j] == 'O') helper(board, 0, j);
                if(board[m - 1][j] == 'O') helper(board, m - 1, j);
            }
            //整理
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (board[i][j] == 'O') board[i][j] = 'X';
                    if (board[i][j] == '*') board[i][j] = 'O';
                }
            }
    
        }
        
        //这是常规模式
        public void helper(char[][] board, int r, int c) {
            if (r < 0 || c < 0 || r >= board.length || c >= board[0].length || board[r][c] != 'O')  return;
            board[r][c] = '*';
            helper(board, r, c + 1);
            helper(board, r, c - 1);
            helper(board, r + 1, c);
            helper(board, r - 1, c);
        }
`

